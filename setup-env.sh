#!/bin/bash

# BlockQuest Environment Setup Script
# This script will guide you through setting up your environment variables

echo "╔════════════════════════════════════════════════╗"
echo "║                                                ║"
echo "║     🔐 BlockQuest Environment Setup 🚀        ║"
echo "║                                                ║"
echo "╚════════════════════════════════════════════════╝"
echo ""
echo "This script will help you configure your environment variables."
echo ""

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# ==================== SERVER ENVIRONMENT SETUP ====================
echo ""
echo "${BLUE}════════════════════════════════════════════════${NC}"
echo "${BLUE}           SERVER CONFIGURATION (.env)          ${NC}"
echo "${BLUE}════════════════════════════════════════════════${NC}"
echo ""

cd server

# Check if .env already exists
if [ -f ".env" ]; then
    echo "${YELLOW}⚠️  .env file already exists!${NC}"
    read -p "Do you want to overwrite it? (y/N): " overwrite
    if [[ ! $overwrite =~ ^[Yy]$ ]]; then
        echo "Skipping server .env setup..."
        cd ..
        exit 0
    fi
fi

# Port Configuration
echo "${GREEN}1. Server Port Configuration${NC}"
echo "   Default: 5001"
read -p "   Enter port (press Enter for default): " PORT
PORT=${PORT:-5001}
echo "   ✓ Port set to: ${PORT}"
echo ""

# MongoDB Configuration
echo "${GREEN}2. MongoDB Configuration${NC}"
echo "   Choose an option:"
echo "   1) Local MongoDB (mongodb://localhost:27017/blockquest)"
echo "   2) MongoDB Atlas (cloud)"
read -p "   Enter choice (1 or 2): " mongo_choice

if [ "$mongo_choice" = "2" ]; then
    echo ""
    echo "   ${YELLOW}📝 Get your MongoDB Atlas URI:${NC}"
    echo "   1. Go to https://cloud.mongodb.com/"
    echo "   2. Create/Login to account"
    echo "   3. Create a cluster (free tier available)"
    echo "   4. Click 'Connect' → 'Connect your application'"
    echo "   5. Copy the connection string"
    echo ""
    read -p "   Paste your MongoDB URI: " MONGODB_URI
else
    MONGODB_URI="mongodb://localhost:27017/blockquest"
fi
echo "   ✓ MongoDB URI configured"
echo ""

# JWT Secret
echo "${GREEN}3. JWT Secret Configuration${NC}"
echo "   Generating a secure random JWT secret..."
JWT_SECRET=$(openssl rand -base64 32)
echo "   ✓ JWT Secret generated: ${JWT_SECRET:0:20}..."
echo ""

# Email Configuration
echo "${GREEN}4. Email Configuration (for OTP)${NC}"
echo "   Which email service do you want to use?"
echo "   1) Gmail (recommended for testing)"
echo "   2) Other SMTP service"
read -p "   Enter choice (1 or 2): " email_choice

if [ "$email_choice" = "2" ]; then
    read -p "   Email Service: " EMAIL_SERVICE
    read -p "   SMTP Host: " EMAIL_HOST
    read -p "   SMTP Port: " EMAIL_PORT
    read -p "   Email Address: " EMAIL_USER
    read -p "   Email Password: " EMAIL_PASSWORD
    read -p "   From Name: " EMAIL_FROM
else
    EMAIL_SERVICE="gmail"
    EMAIL_HOST="smtp.gmail.com"
    EMAIL_PORT="587"
    
    echo ""
    echo "   ${YELLOW}📧 Gmail Setup Instructions:${NC}"
    echo "   1. Go to https://myaccount.google.com/security"
    echo "   2. Enable 2-Step Verification"
    echo "   3. Go to https://myaccount.google.com/apppasswords"
    echo "   4. Create an App Password for 'Mail'"
    echo "   5. Copy the 16-character password"
    echo ""
    read -p "   Enter your Gmail address: " EMAIL_USER
    read -p "   Enter your Gmail App Password: " EMAIL_PASSWORD
    read -p "   Enter 'From' name (e.g., BlockQuest): " FROM_NAME
    FROM_NAME=${FROM_NAME:-BlockQuest}
    EMAIL_FROM="${FROM_NAME} <noreply@blockquest.com>"
fi
echo "   ✓ Email configuration completed"
echo ""

# Frontend URL
echo "${GREEN}5. Frontend URL (for CORS)${NC}"
read -p "   Enter frontend URL (default: http://localhost:5173): " CLIENT_URL
CLIENT_URL=${CLIENT_URL:-http://localhost:5173}
echo "   ✓ Frontend URL set"
echo ""

# Create .env file
cat > .env << EOF
# Backend Environment Variables
# Generated by setup script on $(date)

# Server Configuration
PORT=${PORT}
NODE_ENV=development

# MongoDB Configuration
MONGODB_URI=${MONGODB_URI}

# JWT Configuration
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRE=1h
TEMP_TOKEN_EXPIRE=5m

# Email Configuration
EMAIL_SERVICE=${EMAIL_SERVICE}
EMAIL_HOST=${EMAIL_HOST}
EMAIL_PORT=${EMAIL_PORT}
EMAIL_USER=${EMAIL_USER}
EMAIL_PASSWORD=${EMAIL_PASSWORD}
EMAIL_FROM=${EMAIL_FROM}

# OTP Configuration
OTP_MAX_ATTEMPTS=3
OTP_RATE_LIMIT_MINUTES=15
OTP_MAX_REQUESTS=3

# Registration Cleanup (removes incomplete registrations on new registration)
REGISTRATION_CLEANUP_ENABLED=true

# Frontend URL (for CORS)
CLIENT_URL=${CLIENT_URL}
EOF

echo "${GREEN}✅ Server .env file created successfully!${NC}"
echo ""

cd ..

# ==================== CLIENT ENVIRONMENT SETUP ====================
echo ""
echo "${BLUE}════════════════════════════════════════════════${NC}"
echo "${BLUE}           CLIENT CONFIGURATION (.env)          ${NC}"
echo "${BLUE}════════════════════════════════════════════════${NC}"
echo ""

cd client

# Check if .env already exists
if [ -f ".env" ]; then
    echo "${YELLOW}⚠️  .env file already exists!${NC}"
    read -p "Do you want to overwrite it? (y/N): " overwrite_client
    if [[ ! $overwrite_client =~ ^[Yy]$ ]]; then
        echo "Skipping client .env setup..."
        cd ..
        exit 0
    fi
fi

echo "${GREEN}1. Backend API URL${NC}"
read -p "   Enter backend URL (default: http://localhost:${PORT}/api): " VITE_API_URL
VITE_API_URL=${VITE_API_URL:-http://localhost:${PORT}/api}
echo "   ✓ API URL set"
echo ""

echo "${GREEN}2. Ethereum Chain ID${NC}"
echo "   Common options:"
echo "   1 - Ethereum Mainnet"
echo "   5 - Goerli Testnet"
echo "   11155111 - Sepolia Testnet"
read -p "   Enter Chain ID (default: 1): " VITE_CHAIN_ID
VITE_CHAIN_ID=${VITE_CHAIN_ID:-1}
echo "   ✓ Chain ID set"
echo ""

# Create client .env file
cat > .env << EOF
# Frontend Environment Variables
# Generated by setup script on $(date)

# Backend API URL
VITE_API_URL=${VITE_API_URL}

# Ethereum Chain ID
VITE_CHAIN_ID=${VITE_CHAIN_ID}
EOF

echo "${GREEN}✅ Client .env file created successfully!${NC}"
echo ""

cd ..

# ==================== SUMMARY ====================
echo ""
echo "╔════════════════════════════════════════════════╗"
echo "║                                                ║"
echo "║          ✅ Setup Complete! ✅                ║"
echo "║                                                ║"
echo "╚════════════════════════════════════════════════╝"
echo ""
echo "${GREEN}📋 Configuration Summary:${NC}"
echo ""
echo "Server (.env):"
echo "  • Port: ${PORT}"
echo "  • MongoDB: $([ "$mongo_choice" = "1" ] && echo "Local" || echo "Atlas")"
echo "  • Email: ${EMAIL_USER}"
echo "  • JWT Secret: Generated"
echo ""
echo "Client (.env):"
echo "  • API URL: ${VITE_API_URL}"
echo "  • Chain ID: ${VITE_CHAIN_ID}"
echo ""
echo "${YELLOW}📝 Next Steps:${NC}"
echo ""
if [ "$mongo_choice" = "1" ]; then
    echo "1. ${RED}Start MongoDB:${NC}"
    echo "   brew services start mongodb-community"
    echo "   (or your system's equivalent)"
    echo ""
fi
echo "2. ${GREEN}Install dependencies:${NC}"
echo "   cd server && npm install"
echo "   cd ../client && npm install"
echo ""
echo "3. ${BLUE}Start the servers:${NC}"
echo "   Terminal 1: cd server && npm run dev"
echo "   Terminal 2: cd client && npm run dev"
echo ""
echo "4. ${GREEN}Open your browser:${NC}"
echo "   http://localhost:5173"
echo ""
echo "🎉 Happy coding!"
echo ""
